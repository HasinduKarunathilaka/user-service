/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.Practice.user_service.server.api;

import com.Practice.user_service.server.model.Response;
import com.Practice.user_service.server.model.UserDTO;
import com.Practice.user_service.server.model.UserOrderResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-04T16:19:01.828452375+05:30[Asia/Colombo]")
@Validated
@Tag(name = "users", description = "User operations")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users : Add Users
     * Add user to users table
     *
     * @param userDTO Add user details to create a new user (required)
     * @return User Added successfully (status code 200)
     *         or Invalid user inputs (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "addUser",
        summary = "Add Users",
        description = "Add user to users table",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User Added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid user inputs", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Response>> addUser(
        @Parameter(name = "UserDTO", description = "Add user details to create a new user", required = true) @Valid @RequestBody Mono<UserDTO> userDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addUser(userDTO, exchange);
    }


    /**
     * DELETE /users/remove/{id} : Delete user by id
     * Delete user by their unique id
     *
     * @param id The unique identifier of the user. (required)
     * @return User deleted successfully. (status code 200)
     *         or User not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user by id",
        description = "Delete user by their unique id",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/remove/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Response>> deleteUser(
        @Parameter(name = "id", description = "The unique identifier of the user.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().deleteUser(id, exchange);
    }


    /**
     * GET /users/all : Get All Users
     * Retrieve details of all users.
     *
     * @return User details retrieved successfully. (status code 200)
     *         or User not found. (status code 404)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get All Users",
        description = "Retrieve details of all users.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details retrieved successfully.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/all",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<UserDTO>>> getAllUsers(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllUsers(exchange);
    }


    /**
     * GET /users/{id} : Get User by ID
     * Retrieve details of a user by their unique ID.
     *
     * @param id The unique identifier of the user. (required)
     * @return User details retrieved successfully. (status code 200)
     *         or User not found. (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get User by ID",
        description = "Retrieve details of a user by their unique ID.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<UserDTO>> getUserById(
        @Parameter(name = "id", description = "The unique identifier of the user.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserById(id, exchange);
    }


    /**
     * GET /users/order-details/{id} : Get User details with Order details
     * Retrieve user details and their associated orders by user ID.
     *
     * @param id The unique identifier of the user. (required)
     * @return User details with orders retrieved successfully. (status code 200)
     *         or User or orders not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getUserWithOrderDetails",
        summary = "Get User details with Order details",
        description = "Retrieve user details and their associated orders by user ID.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details with orders retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserOrderResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User or orders not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/order-details/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<UserOrderResponse>> getUserWithOrderDetails(
        @Parameter(name = "id", description = "The unique identifier of the user.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserWithOrderDetails(id, exchange);
    }


    /**
     * PUT /users/update/{id} : Update User by ID
     * Update the details of a user by their unique ID.
     *
     * @param id The unique identifier of the user. (required)
     * @param userDTO The updated user details. (required)
     * @return User updated successfully. (status code 200)
     *         or User not found. (status code 404)
     *         or Invalid input. (status code 400)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update User by ID",
        description = "Update the details of a user by their unique ID.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/update/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Response>> updateUser(
        @Parameter(name = "id", description = "The unique identifier of the user.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UserDTO", description = "The updated user details.", required = true) @Valid @RequestBody Mono<UserDTO> userDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateUser(id, userDTO, exchange);
    }

}
